name: build

on: [ push ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'
      - name: Install dev-dependencies
        run: |
          pip install -U pip
          pip install poetry==1.7.1 poethepoet
          poetry install
      - name: Lint
        run: poe lint

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ '3.8', '3.9', '3.10', '3.11' ]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Python version
        id: py-version
        run: |
          python3 -c "import sys; print('-'.join(str(v) for v in sys.version_info))" > ~/py-ver.txt
          echo version=$(cat ~/py-ver.txt) >> $GITHUB_OUTPUT
      - name: Restore Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: poetry-${{ runner.os }}-${{ steps.py-version.outputs.version }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}
          restore-keys:
            poetry-${{ runner.os }}-${{ steps.py-version.outputs.version }}-
      - name: Install dependencies
        run: |
          pip install -U pip
          pip install poetry==1.7.1 poethepoet
          poetry install
      - name: Run tests
        run: poe test
      - name: Coverage report
        run: poetry run coverage report
